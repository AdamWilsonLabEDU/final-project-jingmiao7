[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Phenology of Mangroves",
    "section": "",
    "text": "Mangrove forests are salt-tolerant trees and shrubs that thrive in intertidal zones of tropical and subtropical regions. These ecosystems are highly valued as blue carbon reservoirs and natural coastal protection systems. Within mangrove ecosystems, different species display significant diversity in tree structures, growth strategies, and environmental adaptations. While mangroves are evergreen, remote sensing observations reveal that distinct species exhibit varying temporal patterns in the onset, persistence, and greenness of their growth stages. This study aims to characterize the phenological patterns of three mangrove species: red mangrove (Rhizophora mangle), white mangrove (Avicennia germinans), and black mangrove (Laguncularia racemosa) in Everglades National Park, Florida. To be more specific, high-temporal-resolution remote sensing data from the Harmonized Landsat and Sentinel (HLS) dataset for 2023 will be used to extract Normalized Difference Vegetation Index (NDVI) values, enabling a detailed analysis of the phenological differences among these dominant species. test"
  },
  {
    "objectID": "index.html#download-and-clean-all-required-data",
    "href": "index.html#download-and-clean-all-required-data",
    "title": "Phenology of Mangroves",
    "section": "Download and clean all required data",
    "text": "Download and clean all required data\n\nInstall and load necessary packages\nThis study needs packages related to image processing, such as: terra, sf, and googledrive; moreover, packages related to result presentation are required, including ggplot2, leaflet, dplyr, and RColorBrewer.\n\nlibrary(terra)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(googledrive)\nlibrary(dplyr)\n\n\n\nThree mangrove species samples\nThe distribution of three mangrove species samples in our study area is as shwon in the following:\n\ncolors &lt;- c(\"Black Mangrove\" = \"black\", \n            \"White Mangrove\" = \"white\", \n            \"Red Mangrove\" = \"red\")\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  addCircleMarkers(data = black_mangrove, \n                   color = \"black\", \n                   radius = 5, \n                   popup = ~paste(\"Black Mangrove&lt;br&gt;\", as.character(geometry))) %&gt;%\n  addCircleMarkers(data = white_mangrove, \n                   color = \"white\", \n                   radius = 5, \n                   popup = ~paste(\"White Mangrove&lt;br&gt;\", as.character(geometry))) %&gt;%\n  addCircleMarkers(data = red_mangrove, \n                   color = \"red\", \n                   radius = 5, \n                   popup = ~paste(\"Red Mangrove&lt;br&gt;\", as.character(geometry))) %&gt;%\n  addLegend(\"bottomright\", \n            colors = colors, \n            labels = names(colors), \n            title = \"Mangrove Samples\")\n\n\n\n\n\nThe downloaded HLS images are uploaded to Google Drive, we can access this data folder through ID. Then, we will collect band 4 and band5 from the dataset.\n\n# drive_auth() for first time to link Google Drive from R, we should do this authentication\nHLSImages_Folder_ID &lt;- \"1Yf0eElhTCvqnYGUwl8KD6p8yAFZhd5-m\"\nHLS_Everglades &lt;- drive_ls(as_id(HLSImages_Folder_ID))\nHLS_band4 &lt;- HLS_Everglades %&gt;% filter(grepl(\"_B04_\", name))\nHLS_band5 &lt;- HLS_Everglades %&gt;% filter(grepl(\"_B05_\", name))\n\n# extract DOY from HLS_band4$name\nextract_doy &lt;- function(names_column) {\n  doy_values &lt;- gsub(\".*_doy(\\\\d{7}).*\", \"\\\\1\", names_column)\n  return(as.numeric(doy_values)) # convert it to numeric\n}\n\n# Add it to DOY column in HLS_band4 and HLS_band5\nHLS_band4$DOY &lt;- extract_doy(HLS_band4$name)\nHLS_band5$DOY &lt;- extract_doy(HLS_band5$name)\n\n# initial the results file (extracted band 4 and band 5 values) as a list\nHLS_band4$download_link &lt;- sapply(HLS_band4$drive_resource, function(x) x$webContentLink)\nHLS_band5$download_link &lt;- sapply(HLS_band5$drive_resource, function(x) x$webContentLink)\n\nband4_rasters &lt;- lapply(HLS_band4$download_link, function(link) rast(link))\nband5_rasters &lt;- lapply(HLS_band5$download_link, function(link) rast(link))\n\nExtract time-series band reflectance values from dataset.\n\n# Function to extract the 'id' part from a given string (raster name or download link)\nextract_id &lt;- function(name) {\n  # Use regular expressions to extract the 'id' parameter value\n  sub(\".*[?&]id=([a-zA-Z0-9_-]+).*\", \"\\\\1\", name)\n}\n\n# Step 1: Create a mapping of 'id' -&gt; DOY from HLS_band5\nHLS_band5$id &lt;- sapply(HLS_band5$download_link, extract_id)\nlink_to_doy &lt;- setNames(HLS_band5$DOY, HLS_band5$id) # Create mapping: id -&gt; DOY\n\n# Step 2: Check CRS of the sample points and rasters\nprint(\"Checking coordinate systems...\")\nsample_crs &lt;- st_crs(black_mangrove) # CRS of black mangrove points\nraster_crs &lt;- crs(band5_rasters[[1]]) # CRS of the first raster (assumed consistent across rasters)\nprint(paste(\"Sample CRS:\", sample_crs$input))\nprint(paste(\"Raster CRS:\", raster_crs))\n\n# If CRS is different, reproject the sample points to match the raster CRS\nif (sample_crs$input != raster_crs) {\n  print(\"CRS mismatch detected. Reprojecting sample points to match raster CRS...\")\n  black_mangrove &lt;- st_transform(black_mangrove, raster_crs)\n  print(\"Reprojection completed.\")\n}\n\n# Initialize results table with DOY and placeholders\nextracted_band5_RM &lt;- data.frame(DOY = HLS_band5$DOY)\nfor (j in seq_len(nrow(red_mangrove))) {\n  extracted_band5_RM[, paste0(\"Red_\", j)] &lt;- NA\n}\n\n# Iterate through rasters\nfor (i in seq_along(band5_rasters)) {\n  raster_name &lt;- names(band5_rasters[[i]])\n  raster_id &lt;- extract_id(raster_name)\n  doy &lt;- link_to_doy[raster_id]\n  \n  if (is.na(doy)) {\n    stop(paste(\"Raster ID\", raster_id, \"could not be matched with any DOY.\"))\n  }\n\n  band5_extract &lt;- terra::extract(band5_rasters[[i]], red_mangrove, method = \"simple\")\n  \n  if (nrow(band5_extract) != nrow(red_mangrove)) {\n    stop(\"Mismatch between extracted values and number of sample points.\")\n  }\n  \n  row_index &lt;- which(extracted_band5_RM$DOY == doy)\n  if (length(row_index) == 0) {\n    stop(paste(\"DOY\", doy, \"not found in results table.\"))\n  }\n  \n  # Add extracted values to the correct row\n  extracted_band5_RM[row_index, paste0(\"Red_\", seq_len(nrow(red_mangrove)))] &lt;- t(as.matrix(band5_extract[, 2]))\n  print(paste(\"Added values for DOY\", doy, \":\", band5_extract[, 2]))\n}\n\n# Save the results\nwrite.csv(extracted_band5_BM, \"data/extracted_band5_BM.csv\", row.names = FALSE)\n\n\n# Function to compute NDVI from Band 4 and Band 5 datasets\ncompute_ndvi &lt;- function(band4_file, band5_file, output_file) {\n  # Step 1: Read Band 4 and Band 5 CSV files\n  cat(\"Reading Band 4 data from:\", band4_file, \"\\n\")\n  band4_data &lt;- read.csv(band4_file)\n  cat(\"Reading Band 5 data from:\", band5_file, \"\\n\")\n  band5_data &lt;- read.csv(band5_file)\n  \n  # Step 2: Preprocess DOY columns\n  cat(\"Preprocessing DOY columns...\\n\")\n  band4_data$DOY &lt;- as.numeric(trimws(band4_data$DOY))\n  band5_data$DOY &lt;- as.numeric(trimws(band5_data$DOY))\n  \n  # Remove duplicates if present\n  if (any(duplicated(band4_data$DOY))) {\n    cat(\"Removing duplicate DOY values in Band 4...\\n\")\n    band4_data &lt;- band4_data[!duplicated(band4_data$DOY), ]\n  }\n  if (any(duplicated(band5_data$DOY))) {\n    cat(\"Removing duplicate DOY values in Band 5...\\n\")\n    band5_data &lt;- band5_data[!duplicated(band5_data$DOY), ]\n  }\n  \n  # Step 3: Identify common DOY\n  cat(\"Identifying common DOY values...\\n\")\n  common_doy &lt;- intersect(band4_data$DOY, band5_data$DOY)\n  if (length(common_doy) == 0) {\n    stop(\"No matching DOY values found between Band 4 and Band 5 datasets.\")\n  }\n  cat(\"Number of matching DOY values:\", length(common_doy), \"\\n\")\n  \n  # Filter data to retain only matching DOY\n  band4_data &lt;- band4_data[band4_data$DOY %in% common_doy, ]\n  band5_data &lt;- band5_data[band5_data$DOY %in% common_doy, ]\n  \n  # Sort datasets by DOY\n  band4_data &lt;- band4_data[order(band4_data$DOY), ]\n  band5_data &lt;- band5_data[order(band5_data$DOY), ]\n  \n  # Step 4: Check alignment of DOY columns\n  cat(\"Checking DOY alignment...\\n\")\n  if (!all(band4_data$DOY == band5_data$DOY)) {\n    mismatches &lt;- which(band4_data$DOY != band5_data$DOY)\n    cat(\"Mismatched DOY rows detected:\\n\")\n    print(band4_data$DOY[mismatches])\n    print(band5_data$DOY[mismatches])\n    stop(\"DOY columns still not aligned after sorting.\")\n  }\n  cat(\"DOY columns are aligned.\\n\")\n  \n  # Step 5: Initialize NDVI results\n  cat(\"Initializing NDVI results...\\n\")\n  ndvi_results &lt;- data.frame(DOY = band4_data$DOY)\n  \n  # Step 6: Compute NDVI for each sample point\n  cat(\"Computing NDVI for sample points...\\n\")\n  for (col in 2:ncol(band4_data)) {  # Skip the DOY column\n    band4_col &lt;- band4_data[, col]\n    band5_col &lt;- band5_data[, col]\n    \n    # Calculate NDVI\n    ndvi_results[, col] &lt;- (band5_col - band4_col) / (band5_col + band4_col)\n  }\n  \n  # Step 7: Add column names to NDVI results\n  colnames(ndvi_results) &lt;- colnames(band4_data)\n  \n  # Step 8: Save NDVI results to CSV\n  cat(\"Saving NDVI results to:\", output_file, \"\\n\")\n  write.csv(ndvi_results, output_file, row.names = FALSE)\n  cat(\"NDVI computation completed successfully.\\n\")\n}\n\ncompute_ndvi(\"data/extracted_band4_BM.csv\", \"data/extracted_band5_BM.csv\", \"data/ndvi_BM.csv\")\ncompute_ndvi(\"data/extracted_band4_RM.csv\", \"data/extracted_band5_RM.csv\", \"data/ndvi_RM.csv\")\ncompute_ndvi(\"data/extracted_band4_WM.csv\", \"data/extracted_band5_WM.csv\", \"data/ndvi_WM.csv\")\n\n\n# Step 1: Read NDVI data for the three species\nBM_ndvi &lt;- read.csv(\"data/ndvi_BM.csv\")\nWM_ndvi &lt;- read.csv(\"data/ndvi_WM.csv\")\nRM_ndvi &lt;- read.csv(\"data/ndvi_RM.csv\")\n\n# Step 2: Calculate average NDVI for each species\nAvg_BM_ndvi &lt;- rowMeans(BM_ndvi[, -1], na.rm = TRUE)  # Exclude DOY column\nAvg_WM_ndvi &lt;- rowMeans(WM_ndvi[, -1], na.rm = TRUE)\nAvg_RM_ndvi &lt;- rowMeans(RM_ndvi[, -1], na.rm = TRUE)\n\n# Step 3: Combine data into a single dataframe for plotting\navg_ndvi_data &lt;- data.frame(\n  Species = rep(c(\"Black Mangrove\", \"White Mangrove\", \"Red Mangrove\"), \n                times = c(length(Avg_BM_ndvi), length(Avg_WM_ndvi), length(Avg_RM_ndvi))),\n  Average_NDVI = c(Avg_BM_ndvi, Avg_WM_ndvi, Avg_RM_ndvi)\n)\n\n# Step 4: Filter data to only include NDVI values between 0 and 1\navg_ndvi_data &lt;- avg_ndvi_data %&gt;%\n  filter(Average_NDVI &gt; 0 & Average_NDVI &lt; 1)\n\n# Step 5: Calculate group sizes for variable box widths\nspecies_counts &lt;- avg_ndvi_data %&gt;%\n  group_by(Species) %&gt;%\n  summarise(Count = n())\n\n# Step 6: Merge counts back into the main dataframe\navg_ndvi_data &lt;- avg_ndvi_data %&gt;%\n  left_join(species_counts, by = \"Species\")\n\n\n# Function to preprocess DOY to extract the day of year\npreprocess_doy &lt;- function(doy_column) {\n  as.numeric(substr(doy_column, 5, 7))  # Extract last three digits\n}\n\n# Function to remove outliers based on 3x standard deviation\nremove_outliers &lt;- function(data) {\n  mean_ndvi &lt;- mean(data$Average_NDVI, na.rm = TRUE)\n  std_ndvi &lt;- sd(data$Average_NDVI, na.rm = TRUE)\n  threshold_low &lt;- mean_ndvi - 3 * std_ndvi\n  threshold_high &lt;- mean_ndvi + 3 * std_ndvi\n  data %&gt;%\n    filter(Average_NDVI &gt;= threshold_low & Average_NDVI &lt;= threshold_high)\n}\n\n# Function to fit harmonic regression and predict NDVI\nfit_harmonic_regression &lt;- function(data, species_name) {\n  # Preprocess DOY and remove outliers\n  data &lt;- data %&gt;%\n    mutate(DOY = preprocess_doy(DOY)) %&gt;%  # Preprocess DOY to extract day of year\n    filter(Average_NDVI &gt; 0 & Average_NDVI &lt; 1) %&gt;%  # Filter valid NDVI values\n    remove_outliers()  # Remove outliers based on 3x std\n  \n  # Fit harmonic regression\n  model &lt;- lm(Average_NDVI ~ cos(2 * pi * DOY / 365) + sin(2 * pi * DOY / 365), data = data)\n  \n  # Generate DOY sequence for predictions\n  doy_seq &lt;- seq(1, 365, by = 1)\n  predictions &lt;- predict(model, newdata = data.frame(\n    DOY = doy_seq\n  ))\n  \n  # Return observed data, fitted model, and predictions\n  list(\n    data = data,\n    model = model,\n    predictions = data.frame(DOY = doy_seq, Fitted_NDVI = predictions),\n    species = species_name\n  )\n}\n\n# Step 1: Load NDVI data for three species\nspecies1_ndvi &lt;- read.csv(\"data/ndvi_BM.csv\")\nspecies2_ndvi &lt;- read.csv(\"data/ndvi_WM.csv\")\nspecies3_ndvi &lt;- read.csv(\"data/ndvi_RM.csv\")\n\n# Step 2: Calculate average NDVI for each species\nspecies1_data &lt;- data.frame(DOY = species1_ndvi$DOY, Average_NDVI = rowMeans(species1_ndvi[, -1], na.rm = TRUE))\nspecies2_data &lt;- data.frame(DOY = species2_ndvi$DOY, Average_NDVI = rowMeans(species2_ndvi[, -1], na.rm = TRUE))\nspecies3_data &lt;- data.frame(DOY = species3_ndvi$DOY, Average_NDVI = rowMeans(species3_ndvi[, -1], na.rm = TRUE))\n\n# Step 3: Fit harmonic regression for each species\nspecies1_fit &lt;- fit_harmonic_regression(species1_data, \"Black Mangrove\")\nspecies2_fit &lt;- fit_harmonic_regression(species2_data, \"White Mangrove\")\nspecies3_fit &lt;- fit_harmonic_regression(species3_data, \"Red Mangrove\")\n\n# Step 4: Combine predictions for visualization\nall_predictions &lt;- bind_rows(\n  species1_fit$predictions %&gt;% mutate(Species = \"Black Mangrove\"),\n  species2_fit$predictions %&gt;% mutate(Species = \"White Mangrove\"),\n  species3_fit$predictions %&gt;% mutate(Species = \"Red Mangrove\")\n)"
  },
  {
    "objectID": "data/Readme.html",
    "href": "data/Readme.html",
    "title": "GEO511 Final Project",
    "section": "",
    "text": "Place any data needed by your analysis in this folder. Please do not store large files here. Then read in any data using the ‘data’ path. For example, read_csv(\"data/data.csv\")."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n# 1 + 1 I don't need this page"
  }
]